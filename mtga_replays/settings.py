"""
Django settings for mtga_replays project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

IS_PROD = os.environ.get('PROD', 'false') == 'true'
IS_TEST = os.environ.get('TEST', 'false') == 'true'
IS_DEV = not IS_PROD and not IS_TEST

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

if not IS_DEV:
    SECRET_KEY = os.environ['SECRET_KEY']
else:
    SECRET_KEY = 'ij2(-=+evf6eu_)zwopb&1#dq*vkv1+_6w9wj%ei^1mzwk&aq1'

ADMINS = [
    'delta.danger@gmail.com',
]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = IS_DEV

if IS_PROD:
    SESSION_COOKIE_SECURE = True

ALLOWED_HOSTS = [
    'localhost',
]

if IS_PROD:
    ALLOWED_HOSTS += [
        'mtga_replays-env.eu-west-2.elasticbeanstalk.com',
    ]

if IS_TEST:
    ALLOWED_HOSTS += [
        'mtga_replays-tst.eu-west-2.elasticbeanstalk.com',
    ]

if IS_DEV:
    CORS_ORIGIN_WHITELIST = (
        'localhost:8080',
    )

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_extensions',
    'hijack',
    'hijack_admin',
    'compat',
    'webpack_loader',
    'rest_framework',

    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mtga_replays.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.environment_type',
            ],
        },
    },
]

WSGI_APPLICATION = 'mtga_replays.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASE_CNF_FILE = 'config/intranet_db_dev.cnf'
if IS_PROD:
    DATABASE_CNF_FILE = 'config/intranet_db.cnf'
if IS_TEST:
    DATABASE_CNF_FILE = 'config/intranet_db_tst.cnf'

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'OPTIONS': {
    #         'read_default_file': os.path.join(BASE_DIR, DATABASE_CNF_FILE),
    #     },
    # }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'core', 'generated'),
)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

if IS_DEV:
    STATS_PATH = os.path.join(BASE_DIR, 'front', 'dist', 'webpack-stats.json')
else:
    STATS_PATH = os.path.join(STATIC_ROOT, 'webpack-stats.json')

WEBPACK_LOADER = {
    'DEFAULT': {
        'BUNDLE_DIR_NAME': 'bundles/',
        'STATS_FILE': STATS_PATH,
    }
}
#
# STATICFILES_STORAGE = 'pipeline.storage.PipelineCachedStorage'
STATICFILES_FINDERS = (
    # 'pipeline.finders.PipelineFinder',
    # 'pipeline.finders.FileSystemFinder',
    # 'pipeline.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not IS_DEV:
    LOG_DIR = os.path.join('/', 'opt', 'python', 'log')

LOG_FILE = os.path.join(LOG_DIR, 'django.log')
DEBUG_LOG_FILE = os.path.join(LOG_DIR, 'django-debug.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(message)s'
        },
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'debug_log_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': DEBUG_LOG_FILE,
            'when': 'midnight',
            'backupCount': 30,
            'formatter': 'verbose',
        },
        'log_file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': LOG_FILE,
            'when': 'midnight',
            'backupCount': 30,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', 'log_file', 'debug_log_file'],
            'level': 'DEBUG',
        },
        'django': {
            'handlers': ['console', 'log_file', 'debug_log_file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    }
}
#
# PIPELINE = {
#     'STYLESHEETS': {
#         'login': {
#             'source_filenames': ('css/login.less',),
#             'output_filename': 'css/login.css',
#         },
#     },
#     'COMPILERS': (
#         'pipeline.compilers.less.LessCompiler',
#     ),
#     'CSS_COMPRESSOR': '',
#     'JS_COMPRESSOR': '',
# }

HIJACK_LOGIN_REDIRECT_URL = '/'  # Where admins are redirected to after hijacking a user
HIJACK_LOGOUT_REDIRECT_URL = '/admin/auth/user/'  # Where admins are redirected to after releasing a user
HIJACK_ALLOW_GET_REQUESTS = True
